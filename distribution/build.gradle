/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.gradle.api.file.RelativePath
import org.elasticsearch.gradle.ConcatFilesTask
import org.elasticsearch.gradle.MavenFilteringHack
import org.elasticsearch.gradle.NoticeTask
import org.elasticsearch.gradle.test.RunTask

import java.nio.file.Files
import java.nio.file.Path

buildscript {
  repositories {
    maven {
      name "gradle-plugins"
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:8.0.3'
  }
}

/*****************************************************************************
 *                  Third party dependencies report                          *
 *****************************************************************************/

// Concatenates the dependencies CSV files into a single file
task generateDependenciesReport(type: ConcatFilesTask) {
  files = fileTree(dir: project.rootDir,  include: '**/dependencies.csv' )
  headerLine = "name,version,url,license"
  target = new File(System.getProperty('csv')?: "${project.buildDir}/reports/dependencies/es-dependencies.csv")
}

/*****************************************************************************
 *                                Notice file                                *
 *****************************************************************************/

// integ test zip only uses server, so a different notice file is needed there
task buildServerNotice(type: NoticeTask) {
  licensesDir new File(project(':server').projectDir, 'licenses')
}

// other distributions include notices from modules as well, which are added below later
task buildDefaultNotice(type: NoticeTask) {
  licensesDir new File(project(':server').projectDir, 'licenses')
}

// other distributions include notices from modules as well, which are added below later
task buildOssNotice(type: NoticeTask) {
  licensesDir new File(project(':server').projectDir, 'licenses')
}

/*****************************************************************************
 *                                  Modules                                  *
 *****************************************************************************/
String ossOutputs = 'build/outputs/oss'
String defaultOutputs = 'build/outputs/default'
String transportOutputs = 'build/outputs/transport-only'

task processOssOutputs(type: Sync) {
  into ossOutputs
}

task processDefaultOutputs(type: Sync) {
  into defaultOutputs
  from processOssOutputs
}

// Integ tests work over the rest http layer, so we need a transport included with the integ test zip.
// All transport modules are included so that they may be randomized for testing
task processTransportOutputs(type: Sync) {
  into transportOutputs
}

// these are dummy tasks that can be used to depend on the relevant sub output dir
task buildOssModules {
  dependsOn processOssOutputs
  outputs.dir "${ossOutputs}/modules"
}
task buildOssBin {
  dependsOn processOssOutputs
  outputs.dir "${ossOutputs}/bin"
}
task buildOssConfig {
  dependsOn processOssOutputs
  outputs.dir "${ossOutputs}/conf"
}
task buildDefaultModules {
  dependsOn processDefaultOutputs
  outputs.dir "${defaultOutputs}/modules"
}
task buildDefaultBin {
  dependsOn processDefaultOutputs
  outputs.dir "${defaultOutputs}/bin"
}
task buildDefaultConfig {
  dependsOn processDefaultOutputs
  outputs.dir "${defaultOutputs}/conf"
}
task buildTransportModules {
  dependsOn processTransportOutputs
  outputs.dir "${transportOutputs}/modules"
}

void copyModule(Sync copyTask, Project module) {
  copyTask.configure {
    dependsOn { module.bundlePlugin }
    from({ zipTree(module.bundlePlugin.outputs.files.singleFile) }) {
      includeEmptyDirs false

      eachFile { details ->
        String name = module.plugins.hasPlugin('elasticsearch.esplugin') ? module.esplugin.name : module.es_meta_plugin.name 
        // Copy all non config/bin files
        // Note these might be unde a subdirectory in the case of a meta plugin
        if ((details.relativePath.pathString ==~ /([^\/]+\/)?(conf|bin)\/.*/) == false) {
          details.relativePath = details.relativePath.prepend('modules', name)
        } else if ((details.relativePath.pathString ==~ /([^\/]+\/)(conf|bin)\/.*/)) {
          // this is the meta plugin case, in which we need to remove the intermediate dir
          String[] segments = details.relativePath.segments
          details.relativePath = new RelativePath(true, segments.takeRight(segments.length - 1))
        }
      }
    }
  }
}

ext.restTestExpansions = [
  'expected.modules.count': 0,
]
// we create the buildOssModules task above but fill it here so we can do a single
// loop over modules to also setup cross task dependencies and increment our modules counter
project.rootProject.subprojects.findAll { it.parent.path == ':modules' }.each { Project module ->
  File licenses = new File(module.projectDir, 'licenses')
  if (licenses.exists()) {
    buildDefaultNotice.licensesDir licenses
    buildOssNotice.licensesDir licenses
  }

  copyModule(processOssOutputs, module)
  if (module.name.startsWith('transport-')) {
    copyModule(processTransportOutputs, module)
  }

  restTestExpansions['expected.modules.count'] += 1
}

// make sure we have a clean task since we aren't a java project, but we have tasks that
// put stuff in the build dir
task clean(type: Delete) {
  delete 'build'
}

configure(subprojects.findAll { ['packages'].contains(it.name) }) {
  File packagingFiles = new File(buildDir, 'packaging')

  task fillTmpPylibDir(type: Copy) {
    println("Copying pylib")
    from '../../server/cassandra/pylib'
    into "${packagingFiles}/pylib"
  }

  task setupPylibDeb(type: Exec) {
    dependsOn fillTmpPylibDir
    workingDir "${packagingFiles}/pylib"
    commandLine "python2", "setup.py", "install", "--no-compile",
            "--root", "${workingDir}", "--install-lib", "usr/lib/python2.7/dist-packages"
    outputs.dir "${workingDir}/usr/lib/python2.7/dist-packages"
  }

  task setupPylibRpm(type: Exec) {
    dependsOn fillTmpPylibDir
    workingDir "${packagingFiles}/pylib"
    commandLine "python2", "setup.py", "install", "--no-compile",
            "--root", "${workingDir}", "--install-lib", "usr/lib/python2.7/site-packages"
    outputs.dir "${workingDir}/usr/lib/python2.7/site-packages"
  }

  apply plugin: 'nebula.ospackage-base'
  ospackage {
    println("COPYING pyfiles ################################ ")
    if (project.name.toLowerCase().contains('rpm')) {
      into('/usr/lib/python2.7/site-packages') {
        from "${packagingFiles}/pylib/usr/lib/python2.7/site-packages"
        fileMode 0664
      }
      directory("/usr/lib/python2.7/site-packages/cqlshlib", 0755)
    }
    else if (project.name.toLowerCase().contains('deb')) {
      println("COPYING DEB")
      into('/usr/lib/python2.7/dist-packages') {
        from "${packagingFiles}/pylib/usr/lib/python2.7/dist-packages"
        fileMode 0664
      }
      directory("/usr/lib/python2.7/dist-packages/cqlshlib", 0755)
    }
  }
}
configure(subprojects.findAll { ['archives', 'packages'].contains(it.name) }) {
  // TODO: the map needs to be an input of the tasks, so that when it changes, the task will re-run...
  /*****************************************************************************
   *             Properties to expand when copying packaging files             *
   *****************************************************************************/
  project.ext {

    /*****************************************************************************
     *                   Common files in all distributions                       *
     *****************************************************************************/
    libFiles = { oss ->
      copySpec {
        // delay by using closures, since they have not yet been configured, so no jar task exists yet
        from { project(':server').jar }
        from { project(':server').configurations.runtime }
        from { project(':libs:plugin-classloader').jar }
        from { project(':distribution:tools:java-version-checker').jar }
        from { project(':distribution:tools:launchers').jar }
        into('tools/plugin-cli') {
          from { project(':distribution:tools:plugin-cli').jar }
          from { project(':distribution:tools:plugin-cli').configurations.runtime }
        }

        // Important files used to ship some cqlsh.py python dependencies if not already installed on host.
        // This prevents the need to run 'pip install cassandra driver'
        with copySpec {
          from '../../server/cassandra/lib'
          include '*.zip'
        }

        // Add dependency on cassandra-driver for UDF
        with copySpec {
          from '../../server/cassandra/lib'
          include 'cassandra-driver-core-3.0.1-shaded.jar'
        }
      }
    }

    modulesFiles = { oss ->
      copySpec {
        eachFile {
          if (it.relativePath.segments[-2] == 'bin' || it.relativePath.segments[-2] == 'MacOS') {
            // bin files, wherever they are within modules (eg platform specific) should be executable
            // and MacOS is an alternative to bin on macOS
            it.mode = 0755
          } else {
            it.mode = 0644
          }
        }
        from project(':distribution').buildOssModules
      }
    }

    transportModulesFiles = copySpec {
      from project(':distribution').buildTransportModules
    }

    configFiles = { distributionType, oss ->
      copySpec {
        with copySpec {
          // main config files, processed with distribution specific substitutions
          from '../src/conf'
          MavenFilteringHack.filter(it, expansionsForDistribution(distributionType, oss))
        }
      }
    }

    binFiles = { distributionType, oss ->
      copySpec {
        with copySpec {
          // main bin files, processed with distribution specific substitutions
          // everything except windows files
          from '../src/bin2'
          exclude '*.exe'
          exclude '*.bat'
          eachFile { it.setMode(0755) }
          MavenFilteringHack.filter(it, expansionsForDistribution(distributionType, oss))
        }
        with copySpec {
          eachFile { it.setMode(0755) }
          from project(':distribution').buildOssBin
        }
      }
    }

    cassandraBinFiles = { distributionType, oss ->
      copySpec {
        from '../../server/cassandra/bin'
        exclude 'cassandra.in.sh'
        exclude 'cassandra'
        eachFile { it.setMode(0755) }
        MavenFilteringHack.filter(it, expansionsForDistribution(distributionType, oss))
      }
    }

    homebinFiles = { distributionType, oss ->
      copySpec {
        from 'src/packaging/homebin'
        eachFile { it.setMode(0755) }
        MavenFilteringHack.filter(it, expansionsForDistribution(distributionType, oss))
      }
    }

    pylibFiles = { distributionType, oss ->
      copySpec {
        from '../../server/cassandra/pylib'
      }
    }

    cassandraLicenseFiles = { distributionType, oss ->
      copySpec {
        from '../../server/cassandra/lib/licenses'
      }
    }

    sigarFiles = { distributionType, oss ->
      copySpec {
        from '../../server/cassandra/lib/sigar-bin'
        eachFile { it.setMode(0755) }
      }
    }

    toolsFiles = { distributionType, oss ->
      copySpec {
        from '../../server/cassandra/tools'
        exclude 'stress/**'
        eachFile { it.setMode(0755) }
      }
    }

    stressFiles = { distributionType, oss ->
      copySpec {
        from '../../server/cassandra/build/tools'
        include 'stress/**'
      }
    }

    commonFiles = { distributionType, oss ->
      copySpec {
        from rootProject.projectDir
        include 'LICENSE.txt'
        include 'CHANGES.txt'
        include 'README.md'
      }
    }

    licenseFiles = { distributionType, oss ->
      copySpec {
        from rootProject.buildDir.path + '/licenses'
        include '**'
      }
    }

    noticeFile = copySpec {
      if (project.name == 'integ-test-zip') {
        from buildServerNotice
      } else {
        from buildDefaultNotice
      }
    }
  }

}

task run(type: RunTask) {
  distribution = 'zip'
}

/**
 * Build some variables that are replaced in the packages. This includes both
 * scripts like bin/elasticsearch and bin/elasticsearch-plugin that a user might run and also
 * scripts like postinst which are run as part of the installation.
 *
 * <dl>
 *  <dt>package.name</dt>
 *  <dd>The name of the project. Its sprinkled throughout the scripts.</dd>
 *  <dt>package.version</dt>
 *  <dd>The version of the project. Its mostly used to find the exact jar name.
 *    </dt>
 *  <dt>path.conf</dt>
 *  <dd>The default directory from which to load configuration. This is used in
 *    the packaging scripts, but in that context it is always
 *    /etc/elasticsearch. Its also used in bin/elasticsearch-plugin, where it is
 *    /etc/elasticsearch for the os packages but $ESHOME/config otherwise.</dd>
 *  <dt>path.env</dt>
 *  <dd>The env file sourced before bin/elasticsearch to set environment
 *    variables. Think /etc/defaults/elasticsearch.</dd>
 *  <dt>heap.min and heap.max</dt>
 *  <dd>Default min and max heap</dd>
 *  <dt>scripts.footer</dt>
 *  <dd>Footer appended to control scripts embedded in the distribution that is
 *    (almost) entirely there for cosmetic reasons.</dd>
 *  <dt>stopping.timeout</dt>
 *  <dd>RPM's init script needs to wait for elasticsearch to stop before
 *    returning from stop and it needs a maximum time to wait. This is it. One
 *    day. DEB retries forever.</dd>
 * </dl>
 */
subprojects {
  ext.expansionsForDistribution = { distributionType, oss ->
    final String defaultHeapSize = "2g"
    final String packagingPathData = "path.data: /var/lib/cassandra/elasticsearch.data"
    final String pathLogs = "/var/log/cassandra"
    final String packagingPathLogs = "path.logs: ${pathLogs}"
    final String packagingLoggc = "${pathLogs}/gc.log"

    String licenseText
    licenseText = rootProject.file('licenses/APACHE-LICENSE-2.0.txt').getText('UTF-8')

    // license text needs to be indented with a single space
    licenseText = ' ' + licenseText.replace('\n', '\n ') 

    String footer = "# Built for ${project.name}-${project.version} " +
        "(${distributionType})"
    Map<String, Object> expansions = [
      'project.name': project.name,
      'project.version': version,

      'path.conf': [
        'deb': '/etc/cassandra',
        'rpm': '/etc/cassandra',
        'def': '"$ES_HOME"/conf'
      ],
      'path.data': [
        'deb': packagingPathData,
        'rpm': packagingPathData,
        'def': '#path.data: /var/lib/cassandra/data'
      ],
      'path.env': [
        'deb': '/etc/default/cassandra',
        'rpm': '/etc/sysconfig/cassandra',
        /* There isn't one of these files for tar or zip but its important to
          make an empty string here so the script can properly skip it. */
        'def': 'if [ -z "$ES_PATH_CONF" ]; then ES_PATH_CONF="$ES_HOME"/conf; done',
      ],
      'source.path.env': [
         'deb': 'source /etc/default/cassandra',
         'rpm': 'source /etc/sysconfig/cassandra',
         'def': 'if [ -z "$ES_PATH_CONF" ]; then ES_PATH_CONF="$ES_HOME"/conf; fi',
      ],
      'path.logs': [
        'deb': packagingPathLogs,
        'rpm': packagingPathLogs,
        'def': '#path.logs: /var/log/cassandra'
      ],
      'loggc': [
        'deb': packagingLoggc,
        'rpm': packagingLoggc,
        'def': '/var/log/cassandra/gc.log'
      ],

      /* Elassandra hack in order to make elasticsearch-plugin works */
      'path.plugin_eshome': [
              'deb': '/usr/share/cassandra',
              'rpm': '/usr/share/cassandra',
              'def': '$(dirname $(dirname "$SCRIPT"))'
      ],

      'heap.min': defaultHeapSize,
      'heap.max': defaultHeapSize,

      'heap.dump.path': [
        'deb': "-XX:HeapDumpPath=/var/log/cassandra",
        'rpm': "-XX:HeapDumpPath=/var/log/cassandra",
        'def': "-XX:HeapDumpPath=logs"
      ],

      'error.file': [
        'deb': "-XX:ErrorFile=/var/log/cassandra/hs_err_pid%p.log",
        'rpm': "-XX:ErrorFile=/var/log/cassandra/hs_err_pid%p.log",
        'def': "-XX:ErrorFile=logs/hs_err_pid%p.log"
      ],

      'stopping.timeout': [
        'rpm': 86400,
      ],

      'scripts.footer': [
        /* Debian needs exit 0 on these scripts so we add it here and preserve
          the pretty footer. */
        'deb': "exit 0\n${footer}",
        'def': footer
      ],

      'es.distribution.flavor': [
        'def': 'oss'
      ],


      'es.distribution.type': [
        'deb': 'deb',
        'rpm': 'rpm',
        'tar': 'tar',
        'zip': 'zip'
      ],

      'license.name': [
        'deb': 'ASL-2.0'
      ],

      'license.text': [
        'deb': licenseText,
      ],
    ]
    Map<String, String> result = [:]
    expansions = expansions.each { key, value ->
      if (value instanceof Map) {
        // 'def' is for default but its three characters like 'rpm' and 'deb'
        value = value[distributionType] ?: value['def']
        if (value == null) {
          return
        }
      }
      result[key] = value
    }
    return result
  }

  ext.assertLinesInFile =  { Path path, List<String> expectedLines ->
    final List<String> actualLines = Files.readAllLines(path)
    int line = 0
    for (final String expectedLine : expectedLines) {
      final String actualLine = actualLines.get(line)
      if (expectedLine != actualLine) {
        throw new GradleException("expected line [${line + 1}] in [${path}] to be [${expectedLine}] but was [${actualLine}]")
      }
      line++
    }
  }
}
